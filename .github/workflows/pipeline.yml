name: Pipeline

##                      test
##           ↗                         ↘
##  Install  →          lint           →        sonarqube
##           ↘                                                  ↘
##              generate  →  deploy-preview  →  validate-pages  →  deploy-production
##                                           ↘                  ↗
##                                                lighthouse

on:
  push:

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache-node-module
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
      - name: Install dependencies
        if: steps.cache-node-module.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
  test:
    name: Test
    needs: [install]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache-node-module
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
      - name: Test the source code
        run: yarn test:coverage
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: CodeCoverageResult
          path: build/coverage
  lint:
    name: Lint
    needs: [install]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache-node-module
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
      - name: Lint the source code
        run: yarn lint
  generate:
    name: Generate
    needs: [install]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache-node-module
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
      - name: Generate the static app
        run: yarn generate
  deploy-preview:
    name: Deploy preview website
    needs: [generate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v19
        id: vercel-deployment
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }} #Required
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }} #Required
          vercel-project-name: cv-with-nuxt # TODO: remove when https://github.com/amondnet/vercel-action/issues/30 is close
    outputs:
      preview-url: ${{ steps.vercel-deployment.outputs.preview-url }}
  sonarqube:
    name: SonarQube
    needs: [test, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache-node-module
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
      - name: Download code coverage results
        uses: actions/download-artifact@v2
        with:
          name: CodeCoverageResult
          path: build/coverage
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v3
      - name: Run SonarQube
        env:
          # to get access to secrets.SONAR_TOKEN, provide GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=fabiencrassat-github
            -Dsonar.host.url=https://sonarcloud.io/
            -Dsonar.projectKey=cv-with-nuxt
      - name: Get Sonar quality gate
        run: node scripts/get_sonar_quality_gate.js https://${{ secrets.SONAR_TOKEN }}:@sonarcloud.io
  validate-pages:
    name: Validate pages
    needs: [deploy-preview]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache-node-module
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
      - name: Validate the pages
        run: yarn validate:pages ${{ needs.deploy-preview.outputs.preview-url }}
  lighthouse:
    name: Lighthouse Audit
    needs: [deploy-preview]
    if: "!startsWith(github.ref, 'refs/heads/renovate')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Modules
        uses: actions/cache@v2
        id: cache-node-module
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
      - name: Audit with Lighthouse
        env:
          LHCI_BASE_URL: https://cv-with-nuxt-git-refs-headsmaster.fabiencrassat.vercel.app
          LHCI_SERVER_BASE_URL: https://lighthouse-ci-server.herokuapp.com
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
        run: yarn validate:lighthouse
  deploy-production:
    name: Deploy production website
    needs: [sonarqube, validate-pages, lighthouse]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v19
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
          vercel-args: --prod 
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }} #Required
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }} #Required
          vercel-project-name: cv-with-nuxt # TODO: remove when https://github.com/amondnet/vercel-action/issues/30 is close
